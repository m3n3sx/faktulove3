# OCR Processor Dockerfile
# Target: Ubuntu 22.04 LTS with Open Source OCR Stack
# Engines: PaddleOCR + EasyOCR + Tesseract

FROM ubuntu:22.04

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Set locale for Polish language support
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8

# Install system dependencies
RUN apt-get update && apt-get install -y \
    # Python and build tools
    python3 \
    python3-pip \
    python3-dev \
    python3-venv \
    build-essential \
    cmake \
    pkg-config \
    wget \
    curl \
    git \
    # Tesseract OCR with Polish support
    tesseract-ocr \
    tesseract-ocr-pol \
    tesseract-ocr-eng \
    libtesseract-dev \
    libleptonica-dev \
    # OpenCV and image processing
    libopencv-dev \
    python3-opencv \
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libwebp-dev \
    libopenjp2-7-dev \
    zlib1g-dev \
    liblcms2-dev \
    libfreetype6-dev \
    libharfbuzz-dev \
    libfribidi-dev \
    # PDF processing
    poppler-utils \
    libpoppler-cpp-dev \
    # Additional image tools
    imagemagick \
    ghostscript \
    libmagickwand-dev \
    # System utilities
    htop \
    nano \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Upgrade pip and install wheel
RUN python3 -m pip install --upgrade pip setuptools wheel

# Set working directory
WORKDIR /app

# Copy requirements and install Python dependencies
COPY requirements_ocr.txt .

# Install PyTorch CPU version first for better compatibility
RUN pip3 install torch==2.1.0 torchvision==0.16.0 --index-url https://download.pytorch.org/whl/cpu

# Install OCR requirements
RUN pip3 install --no-cache-dir -r requirements_ocr.txt

# Create directories for models, temp files, and uploads
RUN mkdir -p /app/models/easyocr \
             /app/models/paddleocr \
             /app/models/tesseract \
             /app/temp \
             /app/uploads \
             /app/logs

# Pre-download OCR models to reduce startup time
RUN python3 -c "import easyocr; easyocr.Reader(['en', 'pl'], model_storage_directory='/app/models/easyocr')" && \
    python3 -c "from paddleocr import PaddleOCR; PaddleOCR(use_angle_cls=True, lang='en', det_model_dir='/app/models/paddleocr', use_gpu=False)"

# Copy application code
COPY . .

# Create non-root user for security
RUN useradd -m -u 1000 ocruser && \
    chown -R ocruser:ocruser /app && \
    chmod -R 755 /app

# Switch to non-root user
USER ocruser

# Set environment variables for OCR engines
ENV TESSDATA_PREFIX=/usr/share/tesseract-ocr/5/tessdata
ENV OMP_NUM_THREADS=2
ENV EASYOCR_MODULE_PATH=/app/models/easyocr
ENV PADDLEOCR_HOME=/app/models/paddleocr

# Health check script
COPY --chown=ocruser:ocruser <<EOF /app/healthcheck.py
#!/usr/bin/env python3
import sys
import requests
import subprocess

def check_tesseract():
    try:
        result = subprocess.run(['tesseract', '--version'], capture_output=True, text=True)
        return result.returncode == 0
    except:
        return False

def check_python_imports():
    try:
        import easyocr, paddleocr, pytesseract, cv2
        return True
    except:
        return False

def check_http_server():
    try:
        response = requests.get('http://localhost:8000/health', timeout=5)
        return response.status_code == 200
    except:
        return False

if __name__ == "__main__":
    checks = [
        ("Tesseract", check_tesseract),
        ("Python imports", check_python_imports),
        ("HTTP server", check_http_server)
    ]
    
    for name, check in checks:
        if not check():
            print(f"Health check failed: {name}")
            sys.exit(1)
    
    print("All health checks passed")
    sys.exit(0)
EOF

RUN chmod +x /app/healthcheck.py

# Health check configuration
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD python3 /app/healthcheck.py || exit 1

# Expose port for OCR service
EXPOSE 8000

# Create startup script
COPY --chown=ocruser:ocruser <<EOF /app/start_ocr_service.py
#!/usr/bin/env python3
"""
OCR Service Startup Script
Provides HTTP API for OCR processing
"""

import os
import json
import base64
import tempfile
from http.server import HTTPServer, BaseHTTPRequestHandler
from urllib.parse import urlparse, parse_qs
import easyocr
import paddleocr
import pytesseract
from PIL import Image
import cv2
import numpy as np

class OCRHandler(BaseHTTPRequestHandler):
    def __init__(self, *args, **kwargs):
        self.easyocr_reader = easyocr.Reader(['en', 'pl'], gpu=False)
        self.paddleocr_engine = paddleocr.PaddleOCR(use_angle_cls=True, lang='en', use_gpu=False)
        super().__init__(*args, **kwargs)
    
    def do_GET(self):
        if self.path == '/health':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({"status": "healthy", "engines": ["tesseract", "easyocr", "paddleocr"]}).encode())
        else:
            self.send_response(404)
            self.end_headers()
    
    def do_POST(self):
        if self.path == '/ocr/process':
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            
            try:
                data = json.loads(post_data.decode('utf-8'))
                image_data = base64.b64decode(data['image'])
                engine = data.get('engine', 'tesseract')
                
                # Save image to temporary file
                with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp_file:
                    tmp_file.write(image_data)
                    tmp_path = tmp_file.name
                
                # Process with selected engine
                if engine == 'tesseract':
                    result = pytesseract.image_to_string(Image.open(tmp_path), lang='pol+eng')
                elif engine == 'easyocr':
                    result = self.easyocr_reader.readtext(tmp_path)
                elif engine == 'paddleocr':
                    result = self.paddleocr_engine.ocr(tmp_path, use_angle_cls=True)
                else:
                    raise ValueError(f"Unknown engine: {engine}")
                
                # Clean up
                os.unlink(tmp_path)
                
                # Send response
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps({"result": str(result), "engine": engine}).encode())
                
            except Exception as e:
                self.send_response(500)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps({"error": str(e)}).encode())
        else:
            self.send_response(404)
            self.end_headers()

if __name__ == "__main__":
    server = HTTPServer(('0.0.0.0', 8000), OCRHandler)
    print("OCR Service started on port 8000")
    server.serve_forever()
EOF

RUN chmod +x /app/start_ocr_service.py

# Default command
CMD ["python3", "/app/start_ocr_service.py"]
/**
 * Style Migrator
 * 
 * Utilities for migrating CSS styles to design system tokens.
 */

import type { StyleMapping, MigrationReport } from './types';
import { migrationConfig } from './config';

export class StyleMigrator {
  private styleMappings: StyleMapping[];
  
  constructor() {
    this.styleMappings = migrationConfig.styleMappings;
  }
  
  /**
   * Migrate CSS classes to design system equivalents
   */
  migrateClasses(classNames: string): string {
    let migratedClasses = classNames;
    
    this.styleMappings.forEach(mapping => {
      const regex = new RegExp(`\\b${mapping.from}\\b`, 'g');
      migratedClasses = migratedClasses.replace(regex, mapping.to);
    });
    
    return migratedClasses;
  }
  
  /**
   * Analyze CSS file for migration opportunities
   */
  analyzeCSSFile(cssContent: string, filePath: string): MigrationReport {
    const report: MigrationReport = {
      migratedComponents: [],
      manualMigration: [],
      deprecatedStyles: [],
      warnings: [],
      errors: []
    };
    
    try {
      // Check for deprecated styles
      this.styleMappings.forEach(mapping => {
        if (mapping.deprecated && cssContent.includes(mapping.from)) {
          report.deprecatedStyles.push(mapping.from);
          if (mapping.warning) {
            report.warnings.push(`${filePath}: ${mapping.warning}`);
          }
        }
      });
      
      // Check for hardcoded values that should use tokens
      this.checkHardcodedValues(cssContent, filePath, report);
      
      // Check for non-8px grid spacing
      this.checkSpacingAlignment(cssContent, filePath, report);
      
      // Check for color contrast issues
      this.checkColorContrast(cssContent, filePath, report);
      
    } catch (error) {
      report.errors.push(`Error analyzing CSS file ${filePath}: ${error}`);
    }
    
    return report;
  }
  
  /**
   * Generate CSS custom properties from design tokens
   */
  generateCSSCustomProperties(): string {
    return `
/* Design System CSS Custom Properties */
/* Generated by Style Migrator */

:root {
  /* Colors */
  --color-primary-50: #eff6ff;
  --color-primary-100: #dbeafe;
  --color-primary-200: #bfdbfe;
  --color-primary-300: #93c5fd;
  --color-primary-400: #60a5fa;
  --color-primary-500: #3b82f6;
  --color-primary-600: #2563eb;
  --color-primary-700: #1d4ed8;
  --color-primary-800: #1e40af;
  --color-primary-900: #1e3a8a;
  
  --color-success-50: #ecfdf5;
  --color-success-100: #d1fae5;
  --color-success-200: #a7f3d0;
  --color-success-300: #6ee7b7;
  --color-success-400: #34d399;
  --color-success-500: #10b981;
  --color-success-600: #059669;
  --color-success-700: #047857;
  --color-success-800: #065f46;
  --color-success-900: #064e3b;
  
  --color-warning-50: #fffbeb;
  --color-warning-100: #fef3c7;
  --color-warning-200: #fde68a;
  --color-warning-300: #fcd34d;
  --color-warning-400: #fbbf24;
  --color-warning-500: #f59e0b;
  --color-warning-600: #d97706;
  --color-warning-700: #b45309;
  --color-warning-800: #92400e;
  --color-warning-900: #78350f;
  
  --color-error-50: #fef2f2;
  --color-error-100: #fee2e2;
  --color-error-200: #fecaca;
  --color-error-300: #fca5a5;
  --color-error-400: #f87171;
  --color-error-500: #ef4444;
  --color-error-600: #dc2626;
  --color-error-700: #b91c1c;
  --color-error-800: #991b1b;
  --color-error-900: #7f1d1d;
  
  /* Typography */
  --font-family-sans: 'Inter', system-ui, -apple-system, sans-serif;
  --font-size-xs: 0.75rem;
  --font-size-sm: 0.875rem;
  --font-size-base: 1rem;
  --font-size-lg: 1.125rem;
  --font-size-xl: 1.25rem;
  --font-size-2xl: 1.5rem;
  --font-size-3xl: 1.875rem;
  --font-size-4xl: 2.25rem;
  
  /* Spacing (8px grid) */
  --spacing-1: 0.25rem; /* 4px */
  --spacing-2: 0.5rem;  /* 8px */
  --spacing-3: 0.75rem; /* 12px */
  --spacing-4: 1rem;    /* 16px */
  --spacing-5: 1.25rem; /* 20px */
  --spacing-6: 1.5rem;  /* 24px */
  --spacing-8: 2rem;    /* 32px */
  --spacing-10: 2.5rem; /* 40px */
  --spacing-12: 3rem;   /* 48px */
  --spacing-16: 4rem;   /* 64px */
  
  /* Shadows */
  --shadow-sm-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
  --shadow-sm-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
  --shadow-sm-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
  
  /* Border Radius */
  --radius-sm: 0.125rem;
  --radius-md: 0.375rem;
  --radius-lg: 0.5rem;
  --radius-xl: 0.75rem;
}

/* Dark mode overrides */
@media (prefers-color-scheme: dark) {
  :root {
    --color-neutral-50: #1f2937;
    --color-neutral-100: #374151;
    --color-neutral-900: #f9fafb;
  }
}
`;
  }
  
  /**
   * Check for hardcoded values that should use design tokens
   */
  private checkHardcodedValues(
    cssContent: string, 
    filePath: string, 
    report: MigrationReport
  ): void {
    // Check for hardcoded colors
    const hexColorRegex = /#[0-9a-fA-F]{6}/g;
    const hexColors = cssContent.match(hexColorRegex);
    if (hexColors) {
      report.warnings.push(
        `${filePath}: Found hardcoded hex colors: ${hexColors.join(', ')}. Consider using design tokens.`
      );
    }
    
    // Check for hardcoded font sizes
    const fontSizeRegex = /font-size:\s*(\d+)px/g;
    const fontSizes = cssContent.match(fontSizeRegex);
    if (fontSizes) {
      report.warnings.push(
        `${filePath}: Found hardcoded font sizes: ${fontSizes.join(', ')}. Consider using typography tokens.`
      );
    }
    
    // Check for hardcoded spacing
    const spacingRegex = /(padding|margin):\s*(\d+)px/g;
    const spacing = cssContent.match(spacingRegex);
    if (spacing) {
      report.warnings.push(
        `${filePath}: Found hardcoded spacing: ${spacing.join(', ')}. Consider using spacing tokens.`
      );
    }
  }
  
  /**
   * Check for spacing values that don't align with 8px grid
   */
  private checkSpacingAlignment(
    cssContent: string, 
    filePath: string, 
    report: MigrationReport
  ): void {
    const spacingRegex = /(padding|margin):\s*(\d+)px/g;
    let match;
    
    while ((match = spacingRegex.exec(cssContent)) !== null) {
      const value = parseInt(match[2]);
      if (value % 4 !== 0) {
        report.warnings.push(
          `${filePath}: Spacing value ${value}px doesn't align with 4px/8px grid system.`
        );
      }
    }
  }
  
  /**
   * Check for potential color contrast issues
   */
  private checkColorContrast(
    cssContent: string, 
    filePath: string, 
    report: MigrationReport
  ): void {
    // Check for light text on light backgrounds
    if (cssContent.includes('color: white') && cssContent.includes('background: #f')) {
      report.warnings.push(
        `${filePath}: Potential contrast issue - light text on light background.`
      );
    }
    
    // Check for dark text on dark backgrounds
    if (cssContent.includes('color: black') && cssContent.includes('background: #0')) {
      report.warnings.push(
        `${filePath}: Potential contrast issue - dark text on dark background.`
      );
    }
  }
  
  /**
   * Generate migration suggestions for CSS
   */
  generateCSSMigrationSuggestions(cssContent: string): string[] {
    const suggestions: string[] = [];
    
    if (cssContent.includes('#')) {
      suggestions.push('Replace hardcoded hex colors with design token CSS custom properties');
    }
    
    if (cssContent.includes('font-size:')) {
      suggestions.push('Replace hardcoded font sizes with typography token variables');
    }
    
    if (cssContent.includes('padding:') || cssContent.includes('margin:')) {
      suggestions.push('Replace hardcoded spacing with spacing token variables');
    }
    
    if (cssContent.includes('box-shadow-sm:')) {
      suggestions.push('Replace custom shadows with design system shadow-sm tokens');
    }
    
    if (cssContent.includes('border-radius:')) {
      suggestions.push('Replace custom border radius with design system radius tokens');
    }
    
    return suggestions;
  }
}
/**
 * Theme Migrator
 * 
 * Utilities for migrating existing theme configurations to the design system.
 */

import type { MigrationReport } from './types';

interface LegacyThemeConfig {
  colors?: Record<string, string>;
  fonts?: Record<string, string>;
  spacing?: Record<string, string>;
  breakpoints?: Record<string, string>;
}

interface DesignSystemTheme {
  colors: {
    primary: Record<string, string>;
    secondary: Record<string, string>;
    success: Record<string, string>;
    warning: Record<string, string>;
    error: Record<string, string>;
    neutral: Record<string, string>;
  };
  typography: {
    fontFamily: Record<string, string>;
    fontSize: Record<string, string>;
    fontWeight: Record<string, string>;
    lineHeight: Record<string, string>;
  };
  spacing: Record<string, string>;
  breakpoints: Record<string, string>;
  shadows: Record<string, string>;
  borderRadius: Record<string, string>;
}

export class ThemeMigrator {
  /**
   * Migrate legacy theme configuration to design system format
   */
  migrateLegacyTheme(legacyTheme: LegacyThemeConfig): DesignSystemTheme {
    return {
      colors: this.migrateColors(legacyTheme.colors || {}),
      typography: this.migrateTypography(legacyTheme.fonts || {}),
      spacing: this.migrateSpacing(legacyTheme.spacing || {}),
      breakpoints: this.migrateBreakpoints(legacyTheme.breakpoints || {}),
      shadows: this.generateDefaultShadows(),
      borderRadius: this.generateDefaultBorderRadius()
    };
  }
  
  /**
   * Analyze existing theme configuration
   */
  analyzeThemeConfig(themeConfig: any, filePath: string): MigrationReport {
    const report: MigrationReport = {
      migratedComponents: [],
      manualMigration: [],
      deprecatedStyles: [],
      warnings: [],
      errors: []
    };
    
    try {
      // Check for missing design system structure
      if (!themeConfig.colors?.primary) {
        report.warnings.push(`${filePath}: Missing primary color scale`);
      }
      
      if (!themeConfig.colors?.success) {
        report.warnings.push(`${filePath}: Missing success color scale`);
      }
      
      if (!themeConfig.colors?.warning) {
        report.warnings.push(`${filePath}: Missing warning color scale`);
      }
      
      if (!themeConfig.colors?.error) {
        report.warnings.push(`${filePath}: Missing error color scale`);
      }
      
      // Check for typography configuration
      if (!themeConfig.typography?.fontFamily) {
        report.warnings.push(`${filePath}: Missing font family configuration`);
      }
      
      if (!themeConfig.typography?.fontSize) {
        report.warnings.push(`${filePath}: Missing font size scale`);
      }
      
      // Check for spacing configuration
      if (!themeConfig.spacing) {
        report.warnings.push(`${filePath}: Missing spacing scale`);
      } else {
        this.validateSpacingScale(themeConfig.spacing, filePath, report);
      }
      
      // Check for breakpoints
      if (!themeConfig.breakpoints) {
        report.warnings.push(`${filePath}: Missing responsive breakpoints`);
      }
      
      // Check for accessibility considerations
      this.checkAccessibilityCompliance(themeConfig, filePath, report);
      
    } catch (error) {
      report.errors.push(`Error analyzing theme config ${filePath}: ${error}`);
    }
    
    return report;
  }
  
  /**
   * Generate Tailwind CSS configuration for design system
   */
  generateTailwindConfig(theme: DesignSystemTheme): string {
    return `
// Tailwind CSS configuration for FaktuLove Design System
// Generated by Theme Migrator

module.exports = {
  content: [
    './src/**/*.{js,jsx,ts,tsx}',
    './src/design-system/**/*.{js,jsx,ts,tsx}'
  ],
  theme: {
    extend: {
      colors: ${JSON.stringify(theme.colors, null, 6)},
      fontFamily: ${JSON.stringify(theme.typography.fontFamily, null, 6)},
      fontSize: ${JSON.stringify(theme.typography.fontSize, null, 6)},
      fontWeight: ${JSON.stringify(theme.typography.fontWeight, null, 6)},
      lineHeight: ${JSON.stringify(theme.typography.lineHeight, null, 6)},
      spacing: ${JSON.stringify(theme.spacing, null, 6)},
      screens: ${JSON.stringify(theme.breakpoints, null, 6)},
      boxShadow: ${JSON.stringify(theme.shadows, null, 6)},
      borderRadius: ${JSON.stringify(theme.borderRadius, null, 6)}
    }
  },
  plugins: [
    require('@tailwindcss/forms'),
    require('@tailwindcss/typography')
  ]
};
`;
  }
  
  /**
   * Migrate color configuration
   */
  private migrateColors(legacyColors: Record<string, string>) {
    return {
      primary: {
        50: '#eff6ff',
        100: '#dbeafe',
        200: '#bfdbfe',
        300: '#93c5fd',
        400: '#60a5fa',
        500: '#3b82f6',
        600: legacyColors.primary || '#2563eb',
        700: '#1d4ed8',
        800: '#1e40af',
        900: '#1e3a8a'
      },
      secondary: {
        50: '#f8fafc',
        100: '#f1f5f9',
        200: '#e2e8f0',
        300: '#cbd5e1',
        400: '#94a3b8',
        500: '#64748b',
        600: legacyColors.secondary || '#475569',
        700: '#334155',
        800: '#1e293b',
        900: '#0f172a'
      },
      success: {
        50: '#ecfdf5',
        100: '#d1fae5',
        200: '#a7f3d0',
        300: '#6ee7b7',
        400: '#34d399',
        500: '#10b981',
        600: legacyColors.success || '#059669',
        700: '#047857',
        800: '#065f46',
        900: '#064e3b'
      },
      warning: {
        50: '#fffbeb',
        100: '#fef3c7',
        200: '#fde68a',
        300: '#fcd34d',
        400: '#fbbf24',
        500: '#f59e0b',
        600: legacyColors.warning || '#d97706',
        700: '#b45309',
        800: '#92400e',
        900: '#78350f'
      },
      error: {
        50: '#fef2f2',
        100: '#fee2e2',
        200: '#fecaca',
        300: '#fca5a5',
        400: '#f87171',
        500: '#ef4444',
        600: legacyColors.error || '#dc2626',
        700: '#b91c1c',
        800: '#991b1b',
        900: '#7f1d1d'
      },
      neutral: {
        50: '#f9fafb',
        100: '#f3f4f6',
        200: '#e5e7eb',
        300: '#d1d5db',
        400: '#9ca3af',
        500: '#6b7280',
        600: '#4b5563',
        700: '#374151',
        800: '#1f2937',
        900: '#111827'
      }
    };
  }
  
  /**
   * Migrate typography configuration
   */
  private migrateTypography(legacyFonts: Record<string, string>) {
    return {
      fontFamily: {
        sans: [legacyFonts.primary || 'Inter', 'system-ui', '-apple-system', 'sans-serif'],
        mono: ['ui-monospace', 'SFMono-Regular', 'Consolas', 'monospace']
      },
      fontSize: {
        xs: ['0.75rem', { lineHeight: '1rem' }],
        sm: ['0.875rem', { lineHeight: '1.25rem' }],
        base: ['1rem', { lineHeight: '1.5rem' }],
        lg: ['1.125rem', { lineHeight: '1.75rem' }],
        xl: ['1.25rem', { lineHeight: '1.75rem' }],
        '2xl': ['1.5rem', { lineHeight: '2rem' }],
        '3xl': ['1.875rem', { lineHeight: '2.25rem' }],
        '4xl': ['2.25rem', { lineHeight: '2.5rem' }]
      },
      fontWeight: {
        normal: '400',
        medium: '500',
        semibold: '600',
        bold: '700'
      },
      lineHeight: {
        tight: '1.25',
        normal: '1.5',
        relaxed: '1.75'
      }
    };
  }
  
  /**
   * Migrate spacing configuration to 8px grid
   */
  private migrateSpacing(legacySpacing: Record<string, string>) {
    return {
      0: '0',
      1: '0.25rem', // 4px
      2: '0.5rem',  // 8px
      3: '0.75rem', // 12px
      4: '1rem',    // 16px
      5: '1.25rem', // 20px
      6: '1.5rem',  // 24px
      8: '2rem',    // 32px
      10: '2.5rem', // 40px
      12: '3rem',   // 48px
      16: '4rem',   // 64px
      20: '5rem',   // 80px
      24: '6rem',   // 96px
      32: '8rem',   // 128px
      ...legacySpacing
    };
  }
  
  /**
   * Migrate breakpoint configuration
   */
  private migrateBreakpoints(legacyBreakpoints: Record<string, string>) {
    return {
      sm: legacyBreakpoints.sm || '640px',
      md: legacyBreakpoints.md || '768px',
      lg: legacyBreakpoints.lg || '1024px',
      xl: legacyBreakpoints.xl || '1280px',
      '2xl': legacyBreakpoints['2xl'] || '1536px'
    };
  }
  
  /**
   * Generate default shadow-sm scale
   */
  private generateDefaultShadows() {
    return {
      sm: '0 1px 2px 0 rgb(0 0 0 / 0.05)',
      md: '0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)',
      lg: '0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1)',
      xl: '0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1)'
    };
  }
  
  /**
   * Generate default border radius scale
   */
  private generateDefaultBorderRadius() {
    return {
      sm: '0.125rem',
      md: '0.375rem',
      lg: '0.5rem',
      xl: '0.75rem',
      '2xl': '1rem'
    };
  }
  
  /**
   * Validate spacing scale alignment with 8px grid
   */
  private validateSpacingScale(
    spacing: Record<string, string>, 
    filePath: string, 
    report: MigrationReport
  ): void {
    Object.entries(spacing).forEach(([key, value]) => {
      if (typeof value === 'string' && value.endsWith('px')) {
        const pxValue = parseInt(value);
        if (pxValue % 4 !== 0) {
          report.warnings.push(
            `${filePath}: Spacing value "${key}: ${value}" doesn't align with 4px/8px grid`
          );
        }
      }
    });
  }
  
  /**
   * Check theme configuration for accessibility compliance
   */
  private checkAccessibilityCompliance(
    themeConfig: any, 
    filePath: string, 
    report: MigrationReport
  ): void {
    // Check for sufficient color contrast
    if (themeConfig.colors) {
      const colors = themeConfig.colors;
      
      // Warn if using very light colors for text
      if (colors.primary && colors.primary['100']) {
        report.warnings.push(
          `${filePath}: Very light primary colors may not meet contrast requirements for text`
        );
      }
      
      // Check for missing semantic colors
      const requiredSemanticColors = ['success', 'warning', 'error'];
      requiredSemanticColors.forEach(color => {
        if (!colors[color]) {
          report.warnings.push(
            `${filePath}: Missing ${color} color for semantic feedback`
          );
        }
      });
    }
    
    // Check for minimum font sizes
    if (themeConfig.typography?.fontSize) {
      const fontSize = themeConfig.typography.fontSize;
      if (fontSize.xs && parseFloat(fontSize.xs) < 0.75) {
        report.warnings.push(
          `${filePath}: Extra small font size may be too small for accessibility (minimum 12px recommended)`
        );
      }
    }
  }
}
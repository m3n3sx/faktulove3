(function(window) {'use strict'; const CSRFManager = {_token: null, _tokenName: 'csrfmiddlewaretoken', getToken: function() {if (this._token) {return this._token}const metaToken = this._getTokenFromMeta(); if (metaToken) {this._token = metaToken; return metaToken}const cookieToken = this._getTokenFromCookie(); if (cookieToken) {this._token = cookieToken; return cookieToken}const formToken = this._getTokenFromForm(); if (formToken) {this._token = formToken; return formToken}console.warn('CSRF token not found. AJAX requests may fail.'); return null}, _getTokenFromMeta: function() {const meta = document.querySelector('meta[name="csrf-token"]'); return meta ? meta.getAttribute('content') : null}, _getTokenFromCookie: function() {const name = 'csrftoken'; const cookies = document.cookie.split(';'); for (let cookie of cookies) {const [key, value] = cookie.trim().split('='); if (key === name) {return decodeURIComponent(value)}}return null}, _getTokenFromForm: function() {const input = document.querySelector(`input[name="${this._tokenName}"]`); return input ? input.value : null}, refreshToken: function() {return fetch('/ocr/get-csrf-token/', {method: 'GET', credentials: 'same-origin', headers: {'Accept': 'application/json', }}) .then(response => {if (!response.ok) {throw new Error('Failed to refresh CSRF token')}return response.json()}) .then(data => {if (data.csrf_token) {this._token = data.csrf_token; this._updateMetaTag(data.csrf_token); return data.csrf_token}throw new Error('CSRF token not found in response')}) .catch(error => {console.error('CSRF token refresh failed:', error); throw error})}, _updateMetaTag: function(token) {let meta = document.querySelector('meta[name="csrf-token"]'); if (!meta) {meta = document.createElement('meta'); meta.name = 'csrf-token'; document.head.appendChild(meta)}meta.content = token}, clearToken: function() {this._token = null}}; const AJAXHelper = {request: function(url, options = {}) {const token = CSRFManager.getToken(); const defaultOptions = {method: 'GET', credentials: 'same-origin', headers: {'Accept': 'application/json', 'Content-Type': 'application/json', }}; const requestOptions = {...defaultOptions, ...options }; if (requestOptions.method !== 'GET' && token) {requestOptions.headers['X-CSRFToken'] = token}const jwtToken = this._getJWTToken(); if (jwtToken) {requestOptions.headers['Authorization'] = `Bearer ${jwtToken}`}return fetch(url, requestOptions) .then(response => {if (response.status === 403) {return response.json().then(data => {if (data.error && data.error.code === 'CSRF_TOKEN_EXPIRED') {return this._handleCSRFExpiration(url, requestOptions)}throw new Error(data.error ? data.error.message : 'Request failed')})}if (response.status === 401) {return response.json().then(data => {if (data.error && data.error.code === 'JWT_TOKEN_EXPIRED') {return this._handleJWTExpiration(url, requestOptions)}throw new Error(data.error ? data.error.message : 'Authentication failed')})}return response}) .catch(error => {console.error('AJAX request failed:', error); throw error})}, _handleCSRFExpiration: function(url, options) {console.log('CSRF token expired, refreshing...'); return CSRFManager.refreshToken() .then(newToken => {options.headers['X-CSRFToken'] = newToken; return fetch(url, options)})}, _handleJWTExpiration: function(url, options) {console.log('JWT token expired, refreshing...'); return this._refreshJWTToken() .then(newToken => {options.headers['Authorization'] = `Bearer ${newToken}`; return fetch(url, options)})}, _getJWTToken: function() {try {const tokenData = localStorage.getItem('jwt_token'); if (tokenData) {const parsed = JSON.parse(tokenData); return parsed.access}}catch (e) {console.warn('Failed to parse JWT token from localStorage')}return null}, _refreshJWTToken: function() {const refreshToken = this._getJWTRefreshToken(); if (!refreshToken) {throw new Error('No refresh token available')}return fetch('/api/v1/auth/token/refresh/', {method: 'POST', credentials: 'same-origin', headers: {'Content-Type': 'application/json', 'X-CSRFToken': CSRFManager.getToken() }, body: JSON.stringify({refresh: refreshToken }) }) .then(response => {if (!response.ok) {throw new Error('Token refresh failed')}return response.json()}) .then(data => {if (data.access) {this._storeJWTToken(data.access, refreshToken); return data.access}throw new Error('No access token in refresh response')})}, _getJWTRefreshToken: function() {try {const tokenData = localStorage.getItem('jwt_token'); if (tokenData) {const parsed = JSON.parse(tokenData); return parsed.refresh}}catch (e) {console.warn('Failed to parse JWT refresh token from localStorage')}return null}, _storeJWTToken: function(accessToken, refreshToken) {const tokenData = {access: accessToken, refresh: refreshToken, timestamp: Date.now() }; localStorage.setItem('jwt_token', JSON.stringify(tokenData))}}; const OCRAJAXHelper = {uploadDocument: function(file, onProgress = null) {const formData = new FormData(); formData.append('document', file); const xhr = new XMLHttpRequest(); return new Promise((resolve, reject) => {xhr.upload.addEventListener('progress', (e) => {if (e.lengthComputable && onProgress) {const percentComplete = (e.loaded / e.total) * 100; onProgress(percentComplete)}}); xhr.addEventListener('load', () => {if (xhr.status >= 200 && xhr.status < 300) {try {const response = JSON.parse(xhr.responseText); resolve(response)}catch (e) {reject(new Error('Invalid JSON response'))}}else {try {const error = JSON.parse(xhr.responseText); reject(new Error(error.error ? error.error.message : 'Upload failed'))}catch (e) {reject(new Error(`Upload failed with status ${xhr.status}`))}}}); xhr.addEventListener('error', () => {reject(new Error('Network error during upload'))}); xhr.open('POST', '/api/v1/ocr/upload/'); const csrfToken = CSRFManager.getToken(); if (csrfToken) {xhr.setRequestHeader('X-CSRFToken', csrfToken)}const jwtToken = AJAXHelper._getJWTToken(); if (jwtToken) {xhr.setRequestHeader('Authorization', `Bearer ${jwtToken}`)}xhr.send(formData)})}, checkStatus: function(taskId) {return AJAXHelper.request(`/api/v1/ocr/status/${taskId}/`)}, getResults: function(filters = {}) {const params = new URLSearchParams(filters); const url = `/api/v1/ocr/results/${params.toString() ? '?' + params.toString() : ''}`; return AJAXHelper.request(url)}, getResultDetail: function(resultId) {return AJAXHelper.request(`/api/v1/ocr/result/${resultId}/`)}, submitValidation: function(resultId, corrections) {return AJAXHelper.request(`/api/v1/ocr/validate/${resultId}/`, {method: 'POST', body: JSON.stringify(corrections) })}}; if (window.jQuery) {window.jQuery.ajaxSetup({beforeSend: function(xhr, settings) {if (!this.crossDomain) {const token = CSRFManager.getToken(); if (token) {xhr.setRequestHeader('X-CSRFToken', token)}}const jwtToken = AJAXHelper._getJWTToken(); if (jwtToken) {xhr.setRequestHeader('Authorization', `Bearer ${jwtToken}`)}}}); window.jQuery(document).ajaxError(function(event, xhr, settings) {if (xhr.status === 403) {try {const response = JSON.parse(xhr.responseText); if (response.error && response.error.code === 'CSRF_TOKEN_EXPIRED') {console.log('CSRF token expired, refreshing...'); CSRFManager.refreshToken().then(() => {window.jQuery.ajax(settings)})}}catch (e) {}}})}window.CSRFManager = CSRFManager; window.AJAXHelper = AJAXHelper; window.OCRAJAXHelper = OCRAJAXHelper; if (document.readyState === 'loading') {document.addEventListener('DOMContentLoaded', function() {CSRFManager.getToken()})}else {CSRFManager.getToken()}})(window);
class ErrorDashboard {constructor() {this.isVisible = false; this.refreshInterval = null; this.config = {refreshRate: 5000, maxDisplayErrors: 50, exportFormat: 'json' }; this.init()}init() {this.createDashboard(); this.setupEventListeners(); this.log('ErrorDashboard initialized')}createDashboard() {const dashboard = document.createElement('div'); dashboard.id = 'error-dashboard'; dashboard.className = 'error-dashboard'; dashboard.style.cssText = ` position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.9); color: white; z-index: 99999; display: none; overflow-y: auto; font-family: 'Courier New', monospace; font-size: 12px; `; dashboard.innerHTML = this.getDashboardHTML(); document.body.appendChild(dashboard)}getDashboardHTML() {return ` <div class="error-dashboard-header" style="padding: 20px; border-bottom: 1px solid #333; background: #1a1a1a;"> <h2 style="margin: 0; color: #ff6b6b;">🚨 Error Monitoring Dashboard</h2> <div style="margin-top: 10px;"> <button id="refresh-dashboard" style="margin-right: 10px; padding: 5px 10px; background: #4CAF50; color: white; border: none; border-radius: 3px; cursor: pointer;">Refresh</button> <button id="clear-errors" style="margin-right: 10px; padding: 5px 10px; background: #f44336; color: white; border: none; border-radius: 3px; cursor: pointer;">Clear Errors</button> <button id="export-report" style="margin-right: 10px; padding: 5px 10px; background: #2196F3; color: white; border: none; border-radius: 3px; cursor: pointer;">Export Report</button> <button id="close-dashboard" style="padding: 5px 10px; background: #666; color: white; border: none; border-radius: 3px; cursor: pointer;">Close</button> <label style="margin-left: 20px;"> <input type="checkbox" id="auto-refresh" checked> Auto-refresh (5s) </label> </div> </div> <div class="error-dashboard-content" style="padding: 20px;"> <div class="dashboard-grid" style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 30px;"> <div class="stats-panel" style="background: #2a2a2a; padding: 15px; border-radius: 5px;"> <h3 style="margin-top: 0; color: #ff9800;">📊 Error Statistics</h3> <div id="error-stats"></div> </div> <div class="performance-panel" style="background: #2a2a2a; padding: 15px; border-radius: 5px;"> <h3 style="margin-top: 0; color: #4CAF50;">⚡ Performance Metrics</h3> <div id="performance-stats"></div> </div> </div> <div class="dashboard-tabs" style="margin-bottom: 20px;"> <button class="tab-button active" data-tab="javascript-errors" style="padding: 10px 20px; background: #333; color: white; border: none; margin-right: 5px; cursor: pointer;">JavaScript Errors</button> <button class="tab-button" data-tab="asset-errors" style="padding: 10px 20px; background: #333; color: white; border: none; margin-right: 5px; cursor: pointer;">Asset Errors</button> <button class="tab-button" data-tab="performance-data" style="padding: 10px 20px; background: #333; color: white; border: none; margin-right: 5px; cursor: pointer;">Performance Data</button> <button class="tab-button" data-tab="system-info" style="padding: 10px 20px; background: #333; color: white; border: none; cursor: pointer;">System Info</button> </div> <div class="tab-content"> <div id="javascript-errors" class="tab-panel active" style="background: #2a2a2a; padding: 15px; border-radius: 5px;"> <h4 style="margin-top: 0; color: #f44336;">JavaScript Errors</h4> <div id="js-errors-list"></div> </div> <div id="asset-errors" class="tab-panel" style="background: #2a2a2a; padding: 15px; border-radius: 5px; display: none;"> <h4 style="margin-top: 0; color: #ff9800;">Asset Loading Errors</h4> <div id="asset-errors-list"></div> </div> <div id="performance-data" class="tab-panel" style="background: #2a2a2a; padding: 15px; border-radius: 5px; display: none;"> <h4 style="margin-top: 0; color: #4CAF50;">Performance Metrics</h4> <div id="performance-data-list"></div> </div> <div id="system-info" class="tab-panel" style="background: #2a2a2a; padding: 15px; border-radius: 5px; display: none;"> <h4 style="margin-top: 0; color: #2196F3;">System Information</h4> <div id="system-info-list"></div> </div> </div> </div> `}setupEventListeners() {document.addEventListener('click', (e) => {if (e.target.id === 'refresh-dashboard') {this.refreshData()}else if (e.target.id === 'clear-errors') {this.clearAllErrors()}else if (e.target.id === 'export-report') {this.exportReport()}else if (e.target.id === 'close-dashboard') {this.hide()}else if (e.target.classList.contains('tab-button')) {this.switchTab(e.target.dataset.tab)}}); document.addEventListener('change', (e) => {if (e.target.id === 'auto-refresh') {if (e.target.checked) {this.startAutoRefresh()}else {this.stopAutoRefresh()}}}); document.addEventListener('keydown', (e) => {if (e.ctrlKey && e.shiftKey && e.key === 'E') {e.preventDefault(); this.toggle()}else if (e.key === 'Escape' && this.isVisible) {this.hide()}})}show() {const dashboard = document.getElementById('error-dashboard'); if (dashboard) {dashboard.style.display = 'block'; this.isVisible = true; this.refreshData(); this.startAutoRefresh()}}hide() {const dashboard = document.getElementById('error-dashboard'); if (dashboard) {dashboard.style.display = 'none'; this.isVisible = false; this.stopAutoRefresh()}}toggle() {if (this.isVisible) {this.hide()}else {this.show()}}switchTab(tabId) {document.querySelectorAll('.tab-panel').forEach(panel => {panel.style.display = 'none'}); document.querySelectorAll('.tab-button').forEach(button => {button.classList.remove('active'); button.style.background = '#333'}); const selectedPanel = document.getElementById(tabId); if (selectedPanel) {selectedPanel.style.display = 'block'}const selectedButton = document.querySelector(`[data-tab="${tabId}"]`); if (selectedButton) {selectedButton.classList.add('active'); selectedButton.style.background = '#555'}}refreshData() {this.updateErrorStats(); this.updatePerformanceStats(); this.updateJavaScriptErrors(); this.updateAssetErrors(); this.updatePerformanceData(); this.updateSystemInfo()}updateErrorStats() {const errorHandler = window.ErrorHandler; const assetMonitor = window.AssetMonitor; if (!errorHandler || !assetMonitor) return; const errorStats = errorHandler.getErrorStats(); const assetStats = assetMonitor.getFailedAssetsReport(); const statsHTML = ` <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;"> <div> <strong>JavaScript Errors:</strong> ${errorStats.totalErrors}<br> <strong>Asset Errors:</strong> ${errorStats.totalAssetErrors}<br> <strong>Critical Asset Failures:</strong> ${errorStats.criticalAssetErrors}</div> <div> <strong>404 Errors:</strong> ${assetStats.by404}<br> <strong>Total Failed Assets:</strong> ${assetStats.total}<br> <strong>Critical Failures:</strong> ${assetStats.critical}</div> </div> `; const statsElement = document.getElementById('error-stats'); if (statsElement) {statsElement.innerHTML = statsHTML}}updatePerformanceStats() {const assetMonitor = window.AssetMonitor; if (!assetMonitor) return; const perfStats = assetMonitor.getPerformanceSummary(); const statsHTML = ` <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;"> <div> <strong>Total Assets:</strong> ${perfStats.totalAssets}<br> <strong>Successful Loads:</strong> ${perfStats.successfulLoads}<br> <strong>Failed Loads:</strong> ${perfStats.failedLoads}</div> <div> <strong>Avg Load Time:</strong> ${perfStats.averageLoadTime}ms<br> <strong>Slow Assets:</strong> ${perfStats.slowAssets}<br> <strong>Page Load:</strong> ${perfStats.pageLoadMetrics?.pageLoad || 'N/A'}ms </div> </div> `; const statsElement = document.getElementById('performance-stats'); if (statsElement) {statsElement.innerHTML = statsHTML}}updateJavaScriptErrors() {const errorHandler = window.ErrorHandler; if (!errorHandler) return; const errorStats = errorHandler.getErrorStats(); const errors = errorStats.recentErrors || []; let errorsHTML = ''; if (errors.length === 0) {errorsHTML = '<p style="color: #4CAF50;">No JavaScript errors detected! 🎉</p>'}else {errorsHTML = '<div style="max-height: 400px; overflow-y: auto;">'; errors.forEach((error, index) => {errorsHTML += ` <div style="border: 1px solid #444; margin-bottom: 10px; padding: 10px; border-radius: 3px; background: #1a1a1a;"> <div style="color: #f44336; font-weight: bold;">${error.type}: ${error.message}</div> <div style="color: #999; font-size: 11px; margin-top: 5px;"> File: ${error.filename || 'Unknown'}| Line: ${error.lineno || 'Unknown'}| Column: ${error.colno || 'Unknown'}</div> <div style="color: #666; font-size: 10px; margin-top: 5px;"> ${new Date(error.timestamp).toLocaleString()}</div> </div> `}); errorsHTML += '</div>'}const errorsElement = document.getElementById('js-errors-list'); if (errorsElement) {errorsElement.innerHTML = errorsHTML}}updateAssetErrors() {const assetMonitor = window.AssetMonitor; if (!assetMonitor) return; const assetStats = assetMonitor.getFailedAssetsReport(); const errors = assetStats.recent || []; let errorsHTML = ''; if (errors.length === 0) {errorsHTML = '<p style="color: #4CAF50;">No asset loading errors detected! 🎉</p>'}else {errorsHTML = '<div style="max-height: 400px; overflow-y: auto;">'; errors.forEach((error, index) => {const statusColor = error.status === 404 ? '#ff9800' : '#f44336'; const criticalBadge = error.critical ? '<span style="background: #f44336; color: white; padding: 2px 6px; border-radius: 3px; font-size: 10px; margin-left: 10px;">CRITICAL</span>' : ''; errorsHTML += ` <div style="border: 1px solid #444; margin-bottom: 10px; padding: 10px; border-radius: 3px; background: #1a1a1a;"> <div style="color: ${statusColor}; font-weight: bold;"> ${error.type}: ${this.getAssetName(error.url)}${criticalBadge}</div> <div style="color: #999; font-size: 11px; margin-top: 5px;"> URL: ${error.url}</div> <div style="color: #999; font-size: 11px; margin-top: 5px;"> Status: ${error.status || 'Unknown'}| Error: ${error.error || 'Load failed'}</div> <div style="color: #666; font-size: 10px; margin-top: 5px;"> ${new Date(error.timestamp).toLocaleString()}</div> </div> `}); errorsHTML += '</div>'}const errorsElement = document.getElementById('asset-errors-list'); if (errorsElement) {errorsElement.innerHTML = errorsHTML}}updatePerformanceData() {const assetMonitor = window.AssetMonitor; if (!assetMonitor) return; const perfStats = assetMonitor.getPerformanceSummary(); let perfHTML = ` <div style="margin-bottom: 20px;"> <h5 style="color: #4CAF50; margin-bottom: 10px;">Page Load Metrics</h5> <div style="background: #1a1a1a; padding: 10px; border-radius: 3px;"> `; if (perfStats.pageLoadMetrics) {perfHTML += ` <div>DOM Content Loaded: ${perfStats.pageLoadMetrics.domContentLoaded}ms</div> <div>Page Load Complete: ${perfStats.pageLoadMetrics.pageLoad}ms</div> <div>DOM Ready: ${perfStats.pageLoadMetrics.domReady}ms</div> `}else {perfHTML += '<div>No page load metrics available</div>'}perfHTML += ` </div> </div> <div> <h5 style="color: #4CAF50; margin-bottom: 10px;">Navigation Timing</h5> <div style="background: #1a1a1a; padding: 10px; border-radius: 3px;"> `; if (perfStats.navigationMetrics) {perfHTML += ` <div>DNS Lookup: ${perfStats.navigationMetrics.dns}ms</div> <div>Connection: ${perfStats.navigationMetrics.connect}ms</div> <div>Request: ${perfStats.navigationMetrics.request}ms</div> <div>Response: ${perfStats.navigationMetrics.response}ms</div> <div>Processing: ${perfStats.navigationMetrics.processing}ms</div> `}else {perfHTML += '<div>No navigation metrics available</div>'}perfHTML += '</div></div>'; const perfElement = document.getElementById('performance-data-list'); if (perfElement) {perfElement.innerHTML = perfHTML}}updateSystemInfo() {const systemHTML = ` <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;"> <div> <h5 style="color: #2196F3; margin-bottom: 10px;">Browser Information</h5> <div style="background: #1a1a1a; padding: 10px; border-radius: 3px; font-size: 11px;"> <div><strong>User Agent:</strong> ${navigator.userAgent}</div> <div><strong>Platform:</strong> ${navigator.platform}</div> <div><strong>Language:</strong> ${navigator.language}</div> <div><strong>Cookies Enabled:</strong> ${navigator.cookieEnabled}</div> <div><strong>Online:</strong> ${navigator.onLine}</div> </div> </div> <div> <h5 style="color: #2196F3; margin-bottom: 10px;">Page Information</h5> <div style="background: #1a1a1a; padding: 10px; border-radius: 3px; font-size: 11px;"> <div><strong>URL:</strong> ${window.location.href}</div> <div><strong>Referrer:</strong> ${document.referrer || 'Direct'}</div> <div><strong>Title:</strong> ${document.title}</div> <div><strong>Load Time:</strong> ${new Date().toLocaleString()}</div> <div><strong>Screen:</strong> ${screen.width}x${screen.height}</div> </div> </div> </div> <div style="margin-top: 20px;"> <h5 style="color: #2196F3; margin-bottom: 10px;">Available APIs</h5> <div style="background: #1a1a1a; padding: 10px; border-radius: 3px; font-size: 11px;"> <div>Performance API: ${window.performance ? '✅' : '❌'}</div> <div>Fetch API: ${window.fetch ? '✅' : '❌'}</div> <div>Local Storage: ${window.localStorage ? '✅' : '❌'}</div> <div>Session Storage: ${window.sessionStorage ? '✅' : '❌'}</div> <div>Web Workers: ${window.Worker ? '✅' : '❌'}</div> <div>Service Workers: ${navigator.serviceWorker ? '✅' : '❌'}</div> <div>Geolocation: ${navigator.geolocation ? '✅' : '❌'}</div> </div> </div> `; const systemElement = document.getElementById('system-info-list'); if (systemElement) {systemElement.innerHTML = systemHTML}}startAutoRefresh() {if (this.refreshInterval) {clearInterval(this.refreshInterval)}this.refreshInterval = setInterval(() => {if (this.isVisible) {this.refreshData()}}, this.config.refreshRate)}stopAutoRefresh() {if (this.refreshInterval) {clearInterval(this.refreshInterval); this.refreshInterval = null}}clearAllErrors() {if (window.ErrorHandler) {window.ErrorHandler.clearErrors()}if (window.AssetMonitor) {window.AssetMonitor.clearData()}this.refreshData(); this.log('All errors cleared')}exportReport() {const report = this.generateReport(); const blob = new Blob([JSON.stringify(report, null, 2)], {type: 'application/json' }); const url = URL.createObjectURL(blob); const a = document.createElement('a'); a.href = url; a.download = `error-report-${new Date().toISOString().split('T')[0]}.json`; document.body.appendChild(a); a.click(); document.body.removeChild(a); URL.revokeObjectURL(url); this.log('Error report exported')}generateReport() {const errorHandler = window.ErrorHandler; const assetMonitor = window.AssetMonitor; const report = {timestamp: new Date().toISOString(), url: window.location.href, userAgent: navigator.userAgent, errors: errorHandler ? errorHandler.getErrorStats() : null, assets: assetMonitor ? assetMonitor.getFailedAssetsReport() : null, performance: assetMonitor ? assetMonitor.getPerformanceSummary() : null, systemInfo: {platform: navigator.platform, language: navigator.language, cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, screen: `${screen.width}x${screen.height}` }}; return report}getAssetName(url) {if (!url) return ''; return url.split('/').pop().split('?')[0]}log(message) {console.log(`[ErrorDashboard] ${message}`)}}window.ErrorDashboard = new ErrorDashboard(); console.log('%c🚨 Error Dashboard Available', 'color: #ff6b6b; font-size: 14px; font-weight: bold;'); console.log('%cPress Ctrl+Shift+E to open the Error Monitoring Dashboard', 'color: #4CAF50; font-size: 12px;'); if (typeof module !== 'undefined' && module.exports) {module.exports = ErrorDashboard}
(function() {'use strict'; const FallbackTester = {testAllAssets: function() {console.log('Testing all configured assets...'); if (!window.CDNFallback) {console.error('CDN Fallback system not loaded'); return}const status = window.CDNFallback.getStatus(); console.log('Current status:', status); const criticalAssets = ['assets/js/lib/jquery-3.7.1.min.js', 'assets/js/lib/bootstrap.bundle.min.js', 'assets/js/lib/apexcharts.min.js', 'assets/css/lib/bootstrap.min.css']; criticalAssets.forEach(asset => {this.testAsset(asset)})}, testAsset: function(assetPath) {console.log(`Testing asset: ${assetPath}`); const status = window.CDNFallback.getStatus(); const isLoaded = status.loaded.some(url => url.includes(assetPath)); const hasFailed = status.failed.some(url => url.includes(assetPath)); const hasFallback = status.fallbacksUsed.some(fb => fb.original.includes(assetPath)); console.log(`Asset ${assetPath}:`, {loaded: isLoaded, failed: hasFailed, fallbackUsed: hasFallback }); return {loaded: isLoaded, failed: hasFailed, fallbackUsed: hasFallback }}, simulateFailure: function(assetPath) {console.log(`Simulating failure for: ${assetPath}`); if (window.CDNFallback && window.CDNFallback.simulateFailure) {window.CDNFallback.simulateFailure(assetPath)}else {console.error('CDN Fallback system not available')}}, testJQuery: function() {const available = typeof jQuery !== 'undefined' || typeof $ !== 'undefined'; console.log('jQuery available:', available); if (available) {console.log('jQuery version:', $.fn.jquery)}return available}, testBootstrap: function() {const available = typeof bootstrap !== 'undefined'; console.log('Bootstrap available:', available); if (available) {console.log('Bootstrap version:', bootstrap.Tooltip.VERSION)}return available}, testApexCharts: function() {const available = typeof ApexCharts !== 'undefined'; console.log('ApexCharts available:', available); if (available) {console.log('ApexCharts loaded successfully')}return available}, testDataTables: function() {const available = typeof $ !== 'undefined' && typeof $.fn.DataTable !== 'undefined'; console.log('DataTables available:', available); if (available) {console.log('DataTables version:', $.fn.dataTable.version)}return available}, runTestSuite: function() {console.log('=== CDN Fallback Test Suite ==='); const results = {jquery: this.testJQuery(), bootstrap: this.testBootstrap(), apexcharts: this.testApexCharts(), datatables: this.testDataTables() }; console.log('Test Results:', results); this.testAllAssets(); this.displayResults(results); return results}, displayResults: function(results) {const resultDiv = document.createElement('div'); resultDiv.id = 'fallback-test-results'; resultDiv.style.cssText = ` position: fixed; top: 50px; left: 20px; background: white; border: 2px solid #007bff; border-radius: 8px; padding: 20px; z-index: 10000; max-width: 400px; box-shadow: 0 4px 12px rgba(0,0,0,0.15); font-family: monospace; font-size: 12px; `; let html = '<h4>CDN Fallback Test Results</h4>'; html += '<button onclick="this.parentNode.remove()" style="float: right; background: #dc3545; color: white; border: none; border-radius: 4px; padding: 4px 8px; cursor: pointer;">Close</button>'; html += '<div style="clear: both; margin-top: 10px;"></div>'; Object.entries(results).forEach(([lib, available]) => {const status = available ? '✅' : '❌'; const color = available ? 'green' : 'red'; html += `<div style="color: ${color}; margin: 5px 0;">${status}${lib}: ${available ? 'Available' : 'Not Available'}</div>`}); const status = window.CDNFallback ? window.CDNFallback.getStatus() : {loaded: [], failed: [], fallbacksUsed: [] }; html += '<hr>'; html += `<div>Assets Loaded: ${status.loaded.length}</div>`; html += `<div>Assets Failed: ${status.failed.length}</div>`; html += `<div>Fallbacks Used: ${status.fallbacksUsed.length}</div>`; if (status.fallbacksUsed.length > 0) {html += '<hr><div><strong>Fallbacks Used:</strong></div>'; status.fallbacksUsed.forEach(fb => {html += `<div style="font-size: 10px; margin: 2px 0;">• ${fb.original.split('/').pop()}</div>`})}resultDiv.innerHTML = html; document.body.appendChild(resultDiv); setTimeout(() => {if (resultDiv.parentNode) {resultDiv.parentNode.removeChild(resultDiv)}}, 30000)}, createTestButtons: function() {const buttonContainer = document.createElement('div'); buttonContainer.id = 'fallback-test-buttons'; buttonContainer.style.cssText = ` position: fixed; bottom: 80px; right: 20px; z-index: 10000; display: flex; flex-direction: column; gap: 5px; `; const buttons = [{text: 'Test All', action: () => this.runTestSuite() }, {text: 'Simulate jQuery Failure', action: () => this.simulateFailure('assets/js/lib/jquery-3.7.1.min.js') }, {text: 'Simulate Bootstrap Failure', action: () => this.simulateFailure('assets/js/lib/bootstrap.bundle.min.js') }, {text: 'Simulate ApexCharts Failure', action: () => this.simulateFailure('assets/js/lib/apexcharts.min.js') }, {text: 'Hide Buttons', action: () => buttonContainer.remove() }]; buttons.forEach(btn => {const button = document.createElement('button'); button.textContent = btn.text; button.style.cssText = ` background: #007bff; color: white; border: none; border-radius: 4px; padding: 8px 12px; cursor: pointer; font-size: 12px; white-space: nowrap; `; button.onclick = btn.action; buttonContainer.appendChild(button)}); document.body.appendChild(buttonContainer)}}; if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {document.addEventListener('DOMContentLoaded', function() {setTimeout(() => {FallbackTester.createTestButtons(); console.log('CDN Fallback test buttons created. Use FallbackTester.runTestSuite() to test.')}, 3000)})}window.FallbackTester = FallbackTester})();
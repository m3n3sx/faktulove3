class InvoiceFormManager {
    constructor() {
        this.isInitialized = false;
        this.init();
    }

    init() {
        if (this.isInitialized) return;
        
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => this.initializeInvoiceForm());
        } else {
            this.initializeInvoiceForm();
        }
    }

    initializeInvoiceForm() {
        if (this.isInitialized) return;
        
        console.log('InvoiceFormManager: Initializing invoice form...');
        
        try {
            this.initializeAutoNumbering();
            this.initializeRecurringInvoice();
            this.initializeContractorData();
            this.initializeInvoiceItems();
            this.initializeCalculations();
            this.initializeFormValidation();
            this.initializeProductModal();
            this.initializeAddButton();
            
            this.isInitialized = true;
            console.log('InvoiceFormManager: Invoice form initialized successfully');
        } catch (error) {
            console.error('InvoiceFormManager: Error during initialization:', error);
        }
    }

    initializeAddButton() {
        // Ensure "Dodaj" button works properly
        const addButtons = document.querySelectorAll('[href*="dodaj_fakture"], [href*="enhanced_invoice_create"]');
        addButtons.forEach(button => {
            button.addEventListener('click', (e) => {
                // Ensure proper navigation
                if (!button.href) {
                    e.preventDefault();
                    window.location.href = '/faktury/enhanced/create/';
                }
            });
        });
    }initializeAutoNumbering() {const autoNumerCheckbox = document.getElementById('id_auto_numer'); const numerFakturyInput = document.getElementById('id_numer'); if (autoNumerCheckbox && numerFakturyInput) {autoNumerCheckbox.addEventListener('change', () => {numerFakturyInput.readOnly = autoNumerCheckbox.checked; if (autoNumerCheckbox.checked) {numerFakturyInput.classList.add('readonly')}else {numerFakturyInput.classList.remove('readonly')}}); if (autoNumerCheckbox.checked) {numerFakturyInput.readOnly = true; numerFakturyInput.classList.add('readonly')}}}initializeRecurringInvoice() {const checkbox = document.getElementById('cykliczna-checkbox'); const settings = document.getElementById('cykliczne-ustawienia'); if (checkbox && settings) {const toggleSettings = () => {const isChecked = checkbox.checked; settings.style.display = isChecked ? 'block' : 'none'; const recurringFields = settings.querySelectorAll('input, select'); recurringFields.forEach(field => {field.required = isChecked})}; checkbox.addEventListener('change', toggleSettings); toggleSettings()}}initializeContractorData() {const pobierzDaneBtn = document.getElementById('pobierz-dane-gus'); const nipInput = document.getElementById('id_nabywca_nip'); if (pobierzDaneBtn && nipInput) {pobierzDaneBtn.addEventListener('click', () => {const nip = nipInput.value.trim(); if (nip.length === 10) {this.fetchGUSData(nip)}else {this.showMessage('NIP musi mieć 10 cyfr', 'warning')}})}if (nipInput) {nipInput.addEventListener('blur', () => {const nip = nipInput.value.trim(); if (nip.length === 10) {this.fetchGUSData(nip)}})}const zapiszKontrahenBtn = document.getElementById('zapisz-kontrahenta'); if (zapiszKontrahenBtn) {zapiszKontrahenBtn.addEventListener('click', () => {this.saveContractor()})}const firmaRadio = document.getElementById('firma'); const osobaPrywatnaRadio = document.getElementById('osoba_prywatna'); if (firmaRadio && osobaPrywatnaRadio) {[firmaRadio, osobaPrywatnaRadio].forEach(radio => {radio.addEventListener('change', () => {this.toggleContractorFields(firmaRadio.checked)})})}}async fetchGUSData(nip) {try {this.showMessage('Pobieranie danych z GUS...', 'info'); const response = await fetch(`/api/get-company-data/?nip=${nip}`); const data = await response.json(); if (!data.error && data.data) {const company = data.data; this.fillContractorData(company); this.showMessage('Dane pobrane z GUS', 'success')}else {this.showMessage(data.error || 'Nie znaleziono danych w GUS', 'warning')}}catch (error) {console.error('Error fetching GUS data:', error); this.showMessage('Błąd podczas pobierania danych z GUS', 'error')}}fillContractorData(company) {const fields = {'id_nabywca_nazwa': company.Nazwa || '', 'id_nabywca_ulica': company.Ulica || '', 'id_nabywca_numer_domu': company.NrNieruchomosci || '', 'id_nabywca_kod_pocztowy': company.KodPocztowy || '', 'id_nabywca_miejscowosc': company.Miejscowosc || '' }; Object.entries(fields).forEach(([id, value]) => {const element = document.getElementById(id); if (element) {element.value = value}})}toggleContractorFields(isFirma) {const nipField = document.getElementById('id_nabywca_nip'); const pobierzBtn = document.getElementById('pobierz-dane-gus'); if (nipField) {nipField.style.display = isFirma ? 'block' : 'none'}if (pobierzBtn) {pobierzBtn.style.display = isFirma ? 'block' : 'none'}}async saveContractor() {const contractorData = this.getContractorData(); if (!contractorData.nazwa) {this.showMessage('Nazwa kontrahenta jest wymagana', 'warning'); return}try {const response = await fetch('/dodaj_kontrahenta_ajax/', {method: 'POST', headers: {'Content-Type': 'application/json', 'X-CSRFToken': this.getCSRFToken() }, body: JSON.stringify(contractorData) }); const data = await response.json(); if (data.success) {this.showMessage('Kontrahent został zapisany', 'success'); this.updateContractorSelect(data.contractor)}else {this.showMessage(data.error || 'Błąd podczas zapisywania kontrahenta', 'error')}}catch (error) {console.error('Error saving contractor:', error); this.showMessage('Błąd podczas zapisywania kontrahenta', 'error')}}getContractorData() {return {nazwa: document.getElementById('id_nabywca_nazwa')?.value || '', nip: document.getElementById('id_nabywca_nip')?.value || '', ulica: document.getElementById('id_nabywca_ulica')?.value || '', numer_domu: document.getElementById('id_nabywca_numer_domu')?.value || '', numer_mieszkania: document.getElementById('id_nabywca_numer_mieszkania')?.value || '', kod_pocztowy: document.getElementById('id_nabywca_kod_pocztowy')?.value || '', miejscowosc: document.getElementById('id_nabywca_miejscowosc')?.value || '', kraj: document.getElementById('id_nabywca_kraj')?.value || 'Polska' }}initializeInvoiceItems() {const addItemBtn = document.getElementById('add-pozycja'); if (addItemBtn) {addItemBtn.addEventListener('click', () => {this.addInvoiceItem()})}this.attachRemoveItemListeners(); this.attachProductSelectListeners(); const hideDiscountBtn = document.getElementById('ukryj-rabat'); if (hideDiscountBtn) {hideDiscountBtn.addEventListener('click', () => {this.toggleDiscountColumns()})}this.attachCalculationListeners()}addInvoiceItem() {const emptyForm = document.getElementById('empty-form'); const tbody = document.getElementById('faktura-pozycje'); const totalForms = document.getElementById('id_pozycje-TOTAL_FORMS'); if (!emptyForm || !tbody || !totalForms) return; const formCount = parseInt(totalForms.value); const newForm = emptyForm.cloneNode(true); newForm.id = ''; newForm.style.display = ''; const fields = newForm.querySelectorAll('input, select, textarea'); fields.forEach(field => {if (field.name) {field.name = field.name.replace('__prefix__', formCount)}if (field.id) {field.id = field.id.replace('__prefix__', formCount)}}); tbody.insertBefore(newForm, emptyForm); totalForms.value = formCount + 1; this.attachItemEventListeners(newForm); console.log('Added new invoice item')}attachRemoveItemListeners() {document.querySelectorAll('.usun-pozycje').forEach(btn => {btn.addEventListener('click', (e) => {this.removeInvoiceItem(e.target)})})}removeInvoiceItem(button) {const row = button.closest('tr'); const deleteField = row.querySelector('input[name$="-DELETE"]'); if (deleteField) {deleteField.checked = true; row.style.display = 'none'}else {row.remove()}this.calculateTotals()}attachProductSelectListeners() {document.querySelectorAll('.produkt-select').forEach(select => {select.addEventListener('change', (e) => {this.fillProductData(e.target)})})}async fillProductData(select) {const productId = select.value; if (!productId) return; try {const response = await fetch(`/api/produkty/${productId}/`); const product = await response.json(); const row = select.closest('tr'); const nazwaField = row.querySelector('input[name$="-nazwa"]'); const cenaField = row.querySelector('input[name$="-cena_netto"]'); const vatField = row.querySelector('select[name$="-vat"]'); const jednostkaField = row.querySelector('select[name$="-jednostka"]'); if (nazwaField) nazwaField.value = product.nazwa || ''; if (cenaField) cenaField.value = product.cena_netto || ''; if (vatField) vatField.value = product.vat || ''; if (jednostkaField) jednostkaField.value = product.jednostka || ''; this.calculateRowTotal(row)}catch (error) {console.error('Error fetching product data:', error)}}attachCalculationListeners() {const calculationFields = document.querySelectorAll('input[name$="-ilosc"], input[name$="-cena_netto"], input[name$="-rabat"], select[name$="-vat"], select[name$="-rabat_typ"]'); calculationFields.forEach(field => {field.addEventListener('input', () => {const row = field.closest('tr'); this.calculateRowTotal(row)})})}attachItemEventListeners(row) {const removeBtn = row.querySelector('.usun-pozycje'); if (removeBtn) {removeBtn.addEventListener('click', (e) => {this.removeInvoiceItem(e.target)})}const productSelect = row.querySelector('.produkt-select'); if (productSelect) {productSelect.addEventListener('change', (e) => {this.fillProductData(e.target)})}const calcFields = row.querySelectorAll('input[name$="-ilosc"], input[name$="-cena_netto"], input[name$="-rabat"], select[name$="-vat"], select[name$="-rabat_typ"]'); calcFields.forEach(field => {field.addEventListener('input', () => {this.calculateRowTotal(row)})})}calculateRowTotal(row) {const iloscField = row.querySelector('input[name$="-ilosc"]'); const cenaField = row.querySelector('input[name$="-cena_netto"]'); const rabatField = row.querySelector('input[name$="-rabat"]'); const rabatTypField = row.querySelector('select[name$="-rabat_typ"]'); const vatField = row.querySelector('select[name$="-vat"]'); const nettoCell = row.querySelector('.wartosc-netto-col'); const bruttoCell = row.querySelector('.wartosc-brutto-col'); if (!iloscField || !cenaField || !nettoCell || !bruttoCell) return; const ilosc = parseFloat(iloscField.value) || 0; const cena = parseFloat(cenaField.value) || 0; const rabat = parseFloat(rabatField?.value) || 0; const rabatTyp = rabatTypField?.value || 'procent'; const vat = parseFloat(vatField?.value) || 0; let nettoValue = ilosc * cena; if (rabat > 0) {if (rabatTyp === 'procent') {nettoValue = nettoValue * (1 - rabat / 100)}else {nettoValue = nettoValue - rabat}}const bruttoValue = nettoValue * (1 + vat / 100); nettoCell.textContent = nettoValue.toFixed(2); bruttoCell.textContent = bruttoValue.toFixed(2); this.calculateTotals()}calculateTotals() {let sumaNettoPrzedRabatem = 0; let sumaRabatu = 0; let sumaNettoPoRabacie = 0; let sumaVat = 0; let sumaBrutto = 0; const rows = document.querySelectorAll('#faktura-pozycje tr.pozycja-form:not(#empty-form)'); rows.forEach(row => {if (row.style.display === 'none') return; const iloscField = row.querySelector('input[name$="-ilosc"]'); const cenaField = row.querySelector('input[name$="-cena_netto"]'); const rabatField = row.querySelector('input[name$="-rabat"]'); const rabatTypField = row.querySelector('select[name$="-rabat_typ"]'); const vatField = row.querySelector('select[name$="-vat"]'); if (!iloscField || !cenaField) return; const ilosc = parseFloat(iloscField.value) || 0; const cena = parseFloat(cenaField.value) || 0; const rabat = parseFloat(rabatField?.value) || 0; const rabatTyp = rabatTypField?.value || 'procent'; const vat = parseFloat(vatField?.value) || 0; const nettoPrzedRabatem = ilosc * cena; sumaNettoPrzedRabatem += nettoPrzedRabatem; let rabatKwota = 0; if (rabat > 0) {if (rabatTyp === 'procent') {rabatKwota = nettoPrzedRabatem * (rabat / 100)}else {rabatKwota = rabat}}sumaRabatu += rabatKwota; const nettoPoRabacie = nettoPrzedRabatem - rabatKwota; sumaNettoPoRabacie += nettoPoRabacie; const vatKwota = nettoPoRabacie * (vat / 100); sumaVat += vatKwota; sumaBrutto += nettoPoRabacie + vatKwota}); this.updateTotalDisplay('.suma-netto-przed-rabatem', sumaNettoPrzedRabatem); this.updateTotalDisplay('.suma-rabatu', sumaRabatu); this.updateTotalDisplay('.suma-netto-po-rabacie', sumaNettoPoRabacie); this.updateTotalDisplay('.suma-vat', sumaVat); this.updateTotalDisplay('.suma-brutto', sumaBrutto); const kwotaDoZaplaty = document.getElementById('kwota-do-zaplaty'); if (kwotaDoZaplaty) {kwotaDoZaplaty.textContent = sumaBrutto.toFixed(2) + ' PLN'}}updateTotalDisplay(selector, value) {const element = document.querySelector(selector); if (element) {element.textContent = value.toFixed(2)}}toggleDiscountColumns() {const discountCols = document.querySelectorAll('.rabat-col'); const button = document.getElementById('ukryj-rabat'); const isHidden = discountCols[0]?.style.display === 'none'; discountCols.forEach(col => {col.style.display = isHidden ? '' : 'none'}); if (button) {button.textContent = isHidden ? 'Ukryj rabat' : 'Pokaż rabat'}}initializeCalculations() {this.calculateTotals()}initializeFormValidation() {const form = document.querySelector('form'); if (form) {form.addEventListener('submit', (e) => {if (!this.validateForm()) {e.preventDefault()}})}}validateForm() {let isValid = true; const errors = []; const visibleRows = document.querySelectorAll('#faktura-pozycje tr.pozycja-form:not(#empty-form)'); const hasItems = Array.from(visibleRows).some(row => {return row.style.display !== 'none' && row.querySelector('input[name$="-nazwa"]')?.value.trim()}); if (!hasItems) {errors.push('Faktura musi zawierać co najmniej jedną pozycję'); isValid = false}const nabywcaNazwa = document.getElementById('id_nabywca_nazwa')?.value.trim(); if (!nabywcaNazwa) {errors.push('Nazwa nabywcy jest wymagana'); isValid = false}if (errors.length > 0) {this.showMessage(errors.join('\n'), 'error')}return isValid}initializeProductModal() {const modal = document.getElementById('dodajProduktModal'); const saveBtn = document.getElementById('zapisz-produkt'); const form = document.getElementById('dodaj-produkt-form'); if (saveBtn && form) {saveBtn.addEventListener('click', async () => {const formData = new FormData(form); try {const response = await fetch(form.action, {method: 'POST', body: formData, headers: {'X-CSRFToken': this.getCSRFToken() }}); const data = await response.json(); if (data.success) {this.showMessage('Produkt został dodany', 'success'); this.updateProductSelects(data.product); if (modal && typeof bootstrap !== 'undefined') {const bsModal = bootstrap.Modal.getInstance(modal); if (bsModal) bsModal.hide()}form.reset()}else {this.showMessage(data.error || 'Błąd podczas dodawania produktu', 'error')}}catch (error) {console.error('Error adding product:', error); this.showMessage('Błąd podczas dodawania produktu', 'error')}})}}updateProductSelects(product) {const selects = document.querySelectorAll('.produkt-select'); selects.forEach(select => {const option = document.createElement('option'); option.value = product.id; option.textContent = product.nazwa; select.appendChild(option)})}updateContractorSelect(contractor) {const select = document.getElementById('id_nabywca'); if (select) {const option = document.createElement('option'); option.value = contractor.id; option.textContent = contractor.nazwa; select.appendChild(option); select.value = contractor.id}}getCSRFToken() {const token = document.querySelector('[name=csrfmiddlewaretoken]')?.value; if (!token) {const metaToken = document.querySelector('meta[name="csrf-token"]')?.content; return metaToken || ''}return token}showMessage(message, type = 'info') {if (typeof Toastify !== 'undefined') {Toastify({text: message, duration: 3000, gravity: "top", position: "right", backgroundColor: this.getToastColor(type) }).showToast()}else {alert(message)}}getToastColor(type) {const colors = {'success': '#28a745', 'error': '#dc3545', 'warning': '#ffc107', 'info': '#17a2b8' }; return colors[type] || colors.info}refresh() {this.initializeInvoiceForm()}}// Initialize safely
if (!window.InvoiceFormManager) {
    window.InvoiceFormManager = new InvoiceFormManager();
}

if (typeof module !== 'undefined' && module.exports) {
    module.exports = InvoiceFormManager;
}